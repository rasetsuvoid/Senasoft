// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Senasoft.Data;

namespace Senasoft.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211018182525_nuevosDatos")]
    partial class nuevosDatos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PruebaFinal.Models.CiudadModel", b =>
                {
                    b.Property<int>("IdCiudad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdCiudad");

                    b.ToTable("Ciudades");
                });

            modelBuilder.Entity("PruebaFinal.Models.Compra_ProductoModel", b =>
                {
                    b.Property<int?>("IdCompra")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("ComprasModelIdCompra")
                        .HasColumnType("int");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("ProductosModelIdProducto")
                        .HasColumnType("int");

                    b.HasKey("IdCompra", "IdProducto");

                    b.HasIndex("ComprasModelIdCompra");

                    b.HasIndex("ProductosModelIdProducto");

                    b.ToTable("Compra_Productos");
                });

            modelBuilder.Entity("PruebaFinal.Models.ComprasModel", b =>
                {
                    b.Property<int>("IdCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaFactura")
                        .HasColumnType("date");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<string>("NumFac")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ProveedorModelIdProveedor")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotalFactura")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("IdCompra");

                    b.HasIndex("ProveedorModelIdProveedor");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("PruebaFinal.Models.EmpleadoModel", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cargo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Cedula")
                        .HasColumnType("int");

                    b.Property<int?>("IdSucursal")
                        .HasColumnType("int");

                    b.HasKey("IdEmpleado");

                    b.HasIndex("IdSucursal");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("PruebaFinal.Models.ProductosModel", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar");

                    b.Property<string>("NombreProducto")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("IdProducto");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("PruebaFinal.Models.Productos_SucursalModel", b =>
                {
                    b.Property<int?>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int?>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<int>("Existencias")
                        .HasColumnType("int");

                    b.Property<string>("Stock")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdProducto", "IdSucursal");

                    b.HasIndex("IdSucursal");

                    b.ToTable("Productos_Sucursal");
                });

            modelBuilder.Entity("PruebaFinal.Models.ProveedorModel", b =>
                {
                    b.Property<int>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("nit")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdProveedor");

                    b.ToTable("Provedores");
                });

            modelBuilder.Entity("PruebaFinal.Models.SucursalModel", b =>
                {
                    b.Property<int>("IdSucursal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int?>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdSucursal");

                    b.HasIndex("IdCiudad");

                    b.ToTable("Sucursal");
                });

            modelBuilder.Entity("PruebaFinal.Models.TrasladoModel", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int?>("IdSucursalOrigen")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("ProductosModelIdProducto")
                        .HasColumnType("int");

                    b.Property<int?>("SucursalModelIdSucursal")
                        .HasColumnType("int");

                    b.HasKey("IdProducto", "IdSucursalOrigen");

                    b.HasIndex("ProductosModelIdProducto");

                    b.HasIndex("SucursalModelIdSucursal");

                    b.ToTable("Traslados");
                });

            modelBuilder.Entity("PruebaFinal.Models.VentasModel", b =>
                {
                    b.Property<int>("IdVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Cedula")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("date");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("IdVenta");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("PruebaFinal.Models.Ventas_ProductosModel", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<int?>("IdVenta")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("ProductosModelIdProducto")
                        .HasColumnType("int");

                    b.Property<int?>("SucursalModelIdSucursal")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("VentasModelIdVenta")
                        .HasColumnType("int");

                    b.HasKey("IdProducto", "IdSucursal", "IdVenta");

                    b.HasIndex("ProductosModelIdProducto");

                    b.HasIndex("SucursalModelIdSucursal");

                    b.HasIndex("VentasModelIdVenta");

                    b.ToTable("Ventas_Productos");
                });

            modelBuilder.Entity("Senasoft.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("EmpleadoModelIdEmpleado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNac")
                        .HasColumnType("Date");

                    b.Property<string>("FirstName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("1");

                    b.Property<int?>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("1");

                    b.HasIndex("EmpleadoModelIdEmpleado");

                    b.HasIndex("IdCiudad");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PruebaFinal.Models.Compra_ProductoModel", b =>
                {
                    b.HasOne("PruebaFinal.Models.ComprasModel", "ComprasModel")
                        .WithMany()
                        .HasForeignKey("ComprasModelIdCompra");

                    b.HasOne("PruebaFinal.Models.ProductosModel", "ProductosModel")
                        .WithMany()
                        .HasForeignKey("ProductosModelIdProducto");

                    b.Navigation("ComprasModel");

                    b.Navigation("ProductosModel");
                });

            modelBuilder.Entity("PruebaFinal.Models.ComprasModel", b =>
                {
                    b.HasOne("PruebaFinal.Models.ProveedorModel", "ProveedorModel")
                        .WithMany()
                        .HasForeignKey("ProveedorModelIdProveedor");

                    b.Navigation("ProveedorModel");
                });

            modelBuilder.Entity("PruebaFinal.Models.EmpleadoModel", b =>
                {
                    b.HasOne("PruebaFinal.Models.SucursalModel", "SucursalModel")
                        .WithMany()
                        .HasForeignKey("IdSucursal");

                    b.Navigation("SucursalModel");
                });

            modelBuilder.Entity("PruebaFinal.Models.Productos_SucursalModel", b =>
                {
                    b.HasOne("PruebaFinal.Models.ProductosModel", "ProductosModel")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaFinal.Models.SucursalModel", "SucursalModel")
                        .WithMany()
                        .HasForeignKey("IdSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductosModel");

                    b.Navigation("SucursalModel");
                });

            modelBuilder.Entity("PruebaFinal.Models.SucursalModel", b =>
                {
                    b.HasOne("PruebaFinal.Models.CiudadModel", "CiudadModel")
                        .WithMany()
                        .HasForeignKey("IdCiudad");

                    b.Navigation("CiudadModel");
                });

            modelBuilder.Entity("PruebaFinal.Models.TrasladoModel", b =>
                {
                    b.HasOne("PruebaFinal.Models.ProductosModel", "ProductosModel")
                        .WithMany()
                        .HasForeignKey("ProductosModelIdProducto");

                    b.HasOne("PruebaFinal.Models.SucursalModel", "SucursalModel")
                        .WithMany()
                        .HasForeignKey("SucursalModelIdSucursal");

                    b.Navigation("ProductosModel");

                    b.Navigation("SucursalModel");
                });

            modelBuilder.Entity("PruebaFinal.Models.Ventas_ProductosModel", b =>
                {
                    b.HasOne("PruebaFinal.Models.ProductosModel", "ProductosModel")
                        .WithMany()
                        .HasForeignKey("ProductosModelIdProducto");

                    b.HasOne("PruebaFinal.Models.SucursalModel", "SucursalModel")
                        .WithMany()
                        .HasForeignKey("SucursalModelIdSucursal");

                    b.HasOne("PruebaFinal.Models.VentasModel", "VentasModel")
                        .WithMany()
                        .HasForeignKey("VentasModelIdVenta");

                    b.Navigation("ProductosModel");

                    b.Navigation("SucursalModel");

                    b.Navigation("VentasModel");
                });

            modelBuilder.Entity("Senasoft.Models.ApplicationUser", b =>
                {
                    b.HasOne("PruebaFinal.Models.EmpleadoModel", "EmpleadoModel")
                        .WithMany()
                        .HasForeignKey("EmpleadoModelIdEmpleado");

                    b.HasOne("PruebaFinal.Models.CiudadModel", "CiudadModel")
                        .WithMany()
                        .HasForeignKey("IdCiudad");

                    b.Navigation("CiudadModel");

                    b.Navigation("EmpleadoModel");
                });
#pragma warning restore 612, 618
        }
    }
}
